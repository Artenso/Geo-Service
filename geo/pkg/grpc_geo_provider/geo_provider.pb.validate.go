// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: geo_provider.proto

package grpc_geo_provider

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Address with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Address) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Address with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AddressMultiError, or nil if none found.
func (m *Address) ValidateAll() error {
	return m.validate(true)
}

func (m *Address) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for City

	// no validation rules for Street

	// no validation rules for House

	// no validation rules for Lat

	// no validation rules for Lon

	if len(errors) > 0 {
		return AddressMultiError(errors)
	}

	return nil
}

// AddressMultiError is an error wrapping multiple validation errors returned
// by Address.ValidateAll() if the designated constraints aren't met.
type AddressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddressMultiError) AllErrors() []error { return m }

// AddressValidationError is the validation error returned by Address.Validate
// if the designated constraints aren't met.
type AddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressValidationError) ErrorName() string { return "AddressValidationError" }

// Error satisfies the builtin error interface
func (e AddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressValidationError{}

// Validate checks the field values on AddressSearchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddressSearchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddressSearchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddressSearchRequestMultiError, or nil if none found.
func (m *AddressSearchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddressSearchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Input

	if len(errors) > 0 {
		return AddressSearchRequestMultiError(errors)
	}

	return nil
}

// AddressSearchRequestMultiError is an error wrapping multiple validation
// errors returned by AddressSearchRequest.ValidateAll() if the designated
// constraints aren't met.
type AddressSearchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddressSearchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddressSearchRequestMultiError) AllErrors() []error { return m }

// AddressSearchRequestValidationError is the validation error returned by
// AddressSearchRequest.Validate if the designated constraints aren't met.
type AddressSearchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressSearchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressSearchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressSearchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressSearchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressSearchRequestValidationError) ErrorName() string {
	return "AddressSearchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddressSearchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddressSearchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressSearchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressSearchRequestValidationError{}

// Validate checks the field values on AddressSearchResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddressSearchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddressSearchResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddressSearchResponseMultiError, or nil if none found.
func (m *AddressSearchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddressSearchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAddresses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddressSearchResponseValidationError{
						field:  fmt.Sprintf("Addresses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddressSearchResponseValidationError{
						field:  fmt.Sprintf("Addresses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddressSearchResponseValidationError{
					field:  fmt.Sprintf("Addresses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AddressSearchResponseMultiError(errors)
	}

	return nil
}

// AddressSearchResponseMultiError is an error wrapping multiple validation
// errors returned by AddressSearchResponse.ValidateAll() if the designated
// constraints aren't met.
type AddressSearchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddressSearchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddressSearchResponseMultiError) AllErrors() []error { return m }

// AddressSearchResponseValidationError is the validation error returned by
// AddressSearchResponse.Validate if the designated constraints aren't met.
type AddressSearchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressSearchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressSearchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressSearchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressSearchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressSearchResponseValidationError) ErrorName() string {
	return "AddressSearchResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddressSearchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddressSearchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressSearchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressSearchResponseValidationError{}

// Validate checks the field values on GeoCodeRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GeoCodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GeoCodeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GeoCodeRequestMultiError,
// or nil if none found.
func (m *GeoCodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GeoCodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Lat

	// no validation rules for Lng

	if len(errors) > 0 {
		return GeoCodeRequestMultiError(errors)
	}

	return nil
}

// GeoCodeRequestMultiError is an error wrapping multiple validation errors
// returned by GeoCodeRequest.ValidateAll() if the designated constraints
// aren't met.
type GeoCodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GeoCodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GeoCodeRequestMultiError) AllErrors() []error { return m }

// GeoCodeRequestValidationError is the validation error returned by
// GeoCodeRequest.Validate if the designated constraints aren't met.
type GeoCodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GeoCodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GeoCodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GeoCodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GeoCodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GeoCodeRequestValidationError) ErrorName() string { return "GeoCodeRequestValidationError" }

// Error satisfies the builtin error interface
func (e GeoCodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGeoCodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GeoCodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GeoCodeRequestValidationError{}

// Validate checks the field values on GeoCodeResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GeoCodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GeoCodeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GeoCodeResponseMultiError, or nil if none found.
func (m *GeoCodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GeoCodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAddresses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GeoCodeResponseValidationError{
						field:  fmt.Sprintf("Addresses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GeoCodeResponseValidationError{
						field:  fmt.Sprintf("Addresses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GeoCodeResponseValidationError{
					field:  fmt.Sprintf("Addresses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GeoCodeResponseMultiError(errors)
	}

	return nil
}

// GeoCodeResponseMultiError is an error wrapping multiple validation errors
// returned by GeoCodeResponse.ValidateAll() if the designated constraints
// aren't met.
type GeoCodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GeoCodeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GeoCodeResponseMultiError) AllErrors() []error { return m }

// GeoCodeResponseValidationError is the validation error returned by
// GeoCodeResponse.Validate if the designated constraints aren't met.
type GeoCodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GeoCodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GeoCodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GeoCodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GeoCodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GeoCodeResponseValidationError) ErrorName() string { return "GeoCodeResponseValidationError" }

// Error satisfies the builtin error interface
func (e GeoCodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGeoCodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GeoCodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GeoCodeResponseValidationError{}
